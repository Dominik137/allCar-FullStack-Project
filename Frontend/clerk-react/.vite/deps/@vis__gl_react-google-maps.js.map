{
  "version": 3,
  "sources": ["../../node_modules/fast-deep-equal/index.js", "../../node_modules/@vis.gl/react-google-maps/src/libraries/api-loading-status.ts", "../../node_modules/@vis.gl/react-google-maps/src/libraries/google-maps-api-loader.ts", "../../node_modules/@vis.gl/react-google-maps/src/components/api-provider.tsx", "../../node_modules/@vis.gl/react-google-maps/src/components/map/use-map-events.ts", "../../node_modules/@vis.gl/react-google-maps/src/libraries/use-deep-compare-effect.tsx", "../../node_modules/@vis.gl/react-google-maps/src/components/map/use-map-options.ts", "../../node_modules/@vis.gl/react-google-maps/src/libraries/use-force-update.ts", "../../node_modules/@vis.gl/react-google-maps/src/components/map/use-tracked-camera-state-ref.ts", "../../node_modules/@vis.gl/react-google-maps/src/hooks/use-api-loading-status.ts", "../../node_modules/@vis.gl/react-google-maps/src/components/map/use-deckgl-camera-update.ts", "../../node_modules/@vis.gl/react-google-maps/src/libraries/lat-lng-utils.ts", "../../node_modules/@vis.gl/react-google-maps/src/components/map/use-map-camera-params.ts", "../../node_modules/@vis.gl/react-google-maps/src/components/map/auth-failure-message.tsx", "../../node_modules/@vis.gl/react-google-maps/src/libraries/use-callback-ref.tsx", "../../node_modules/@vis.gl/react-google-maps/src/hooks/use-api-is-loaded.ts", "../../node_modules/@vis.gl/react-google-maps/src/components/map/use-map-instance.ts", "../../node_modules/@vis.gl/react-google-maps/src/components/map/index.tsx", "../../node_modules/@vis.gl/react-google-maps/src/hooks/use-maps-library.ts", "../../node_modules/@vis.gl/react-google-maps/src/components/advanced-marker.tsx", "../../node_modules/@vis.gl/react-google-maps/src/components/info-window.tsx", "../../node_modules/@vis.gl/react-google-maps/src/libraries/errors.ts", "../../node_modules/@vis.gl/react-google-maps/src/hooks/use-map.ts", "../../node_modules/@vis.gl/react-google-maps/src/components/map-control.tsx", "../../node_modules/@vis.gl/react-google-maps/src/components/marker.tsx", "../../node_modules/@vis.gl/react-google-maps/src/components/pin.tsx", "../../node_modules/@vis.gl/react-google-maps/src/libraries/assert-not-null.ts", "../../node_modules/@vis.gl/react-google-maps/src/hooks/directions-service.ts", "../../node_modules/@vis.gl/react-google-maps/src/hooks/street-view-panorama.ts", "../../node_modules/@vis.gl/react-google-maps/src/libraries/limit-tilt-range.ts"],
  "sourcesContent": ["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n", "export const APILoadingStatus = {\n  NOT_LOADED: 'NOT_LOADED',\n  LOADING: 'LOADING',\n  LOADED: 'LOADED',\n  FAILED: 'FAILED',\n  AUTH_FAILURE: 'AUTH_FAILURE'\n};\nexport type APILoadingStatus =\n  (typeof APILoadingStatus)[keyof typeof APILoadingStatus];\n", "import {APILoadingStatus} from './api-loading-status';\n\nexport type ApiParams = {\n  key: string;\n  v?: string;\n  language?: string;\n  region?: string;\n  libraries?: string;\n  solutionChannel?: string;\n  authReferrerPolicy?: string;\n};\n\n// Declare global maps callback function\ndeclare global {\n  interface Window {\n    __googleMapsCallback__?: () => void;\n    gm_authFailure?: () => void;\n  }\n}\n\nconst MAPS_API_BASE_URL = 'https://maps.googleapis.com/maps/api/js';\n\n/**\n * A GoogleMapsApiLoader to reliably load and unload the Google Maps JavaScript API.\n *\n * The actual loading and unloading is delayed into the microtask queue, to\n * allow using the API in an useEffect hook, without worrying about multiple API loads.\n */\nexport class GoogleMapsApiLoader {\n  public static loadingStatus: APILoadingStatus = APILoadingStatus.NOT_LOADED;\n  public static serializedApiParams?: string;\n\n  /**\n   * Loads the Google Maps API with the specified parameters.\n   * Since the Maps library can only be loaded once per page, this will\n   * produce a warning when called multiple times with different\n   * parameters.\n   *\n   * The returned promise resolves when loading completes\n   * and rejects in case of an error or when the loading was aborted.\n   */\n  static async load(\n    params: ApiParams,\n    onLoadingStatusChange: (status: APILoadingStatus) => void\n  ): Promise<void> {\n    const libraries = params.libraries ? params.libraries.split(',') : [];\n    const serializedParams = this.serializeParams(params);\n\n    // note: if google.maps.importLibrary was defined externally, the params\n    //   will be ignored. If it was defined by a previous call to this\n    //   method, we will check that the key and other parameters have not been\n    //   changed in between calls.\n    if (!window.google?.maps?.importLibrary) {\n      this.serializedApiParams = serializedParams;\n      this.initImportLibrary(params, onLoadingStatusChange);\n    } else {\n      // if serializedApiParams isn't defined the library was loaded externally\n      // and we can only assume that went alright.\n      if (!this.serializedApiParams) {\n        this.loadingStatus = APILoadingStatus.LOADED;\n      }\n\n      onLoadingStatusChange(this.loadingStatus);\n    }\n\n    if (\n      this.serializedApiParams &&\n      this.serializedApiParams !== serializedParams\n    ) {\n      console.warn(\n        `The maps API has already been loaded with different ` +\n          `parameters and will not be loaded again. Refresh the page for ` +\n          `new values to have effect.`\n      );\n    }\n\n    for (const lib of ['maps', ...libraries]) {\n      await google.maps.importLibrary(lib);\n    }\n  }\n\n  private static serializeParams(params: ApiParams): string {\n    return [\n      params.v,\n      params.key,\n      params.language,\n      params.region,\n      params.authReferrerPolicy,\n      params.solutionChannel\n    ].join('/');\n  }\n\n  private static initImportLibrary(\n    params: ApiParams,\n    onLoadingStatusChange: (status: APILoadingStatus) => void\n  ) {\n    if (!window.google) window.google = {} as never;\n    if (!window.google.maps) window.google.maps = {} as never;\n\n    if (window.google.maps['importLibrary']) {\n      console.warn('initImportLibrary can only be called once.', params);\n\n      return;\n    }\n\n    let apiPromise: Promise<void> | null = null;\n\n    const loadApi = (library: string) => {\n      if (apiPromise) return apiPromise;\n\n      apiPromise = new Promise((resolve, reject) => {\n        const scriptElement = document.createElement('script');\n        const urlParams = new URLSearchParams();\n\n        for (const [key, value] of Object.entries(params)) {\n          const urlParamName = key.replace(\n            /[A-Z]/g,\n            t => '_' + t[0].toLowerCase()\n          );\n          urlParams.set(urlParamName, value);\n        }\n        urlParams.set('libraries', library);\n        urlParams.set('loading', 'async');\n        urlParams.set('callback', '__googleMapsCallback__');\n\n        scriptElement.async = true;\n        scriptElement.src = MAPS_API_BASE_URL + `?` + urlParams.toString();\n\n        window.__googleMapsCallback__ = () => {\n          this.loadingStatus = APILoadingStatus.LOADED;\n          onLoadingStatusChange(this.loadingStatus);\n          resolve();\n        };\n\n        window.gm_authFailure = () => {\n          this.loadingStatus = APILoadingStatus.AUTH_FAILURE;\n          onLoadingStatusChange(this.loadingStatus);\n        };\n\n        scriptElement.onerror = () => {\n          this.loadingStatus = APILoadingStatus.FAILED;\n          onLoadingStatusChange(this.loadingStatus);\n          reject(new Error('The Google Maps JavaScript API could not load.'));\n        };\n\n        scriptElement.nonce =\n          (document.querySelector('script[nonce]') as HTMLScriptElement)\n            ?.nonce || '';\n\n        this.loadingStatus = APILoadingStatus.LOADING;\n        onLoadingStatusChange(this.loadingStatus);\n        document.head.append(scriptElement);\n      });\n\n      return apiPromise;\n    };\n\n    // for the first load, we declare an importLibrary function that will\n    // be overwritten once the api is loaded.\n    google.maps.importLibrary = libraryName =>\n      loadApi(libraryName).then(() => google.maps.importLibrary(libraryName));\n  }\n}\n", "import React, {\n  PropsWithChildren,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState\n} from 'react';\n\nimport {\n  ApiParams,\n  GoogleMapsApiLoader\n} from '../libraries/google-maps-api-loader';\nimport {APILoadingStatus} from '../libraries/api-loading-status';\n\ntype ImportLibraryFunction = typeof google.maps.importLibrary;\ntype GoogleMapsLibrary = Awaited<ReturnType<ImportLibraryFunction>>;\ntype LoadedLibraries = {[name: string]: GoogleMapsLibrary};\n\nexport interface APIProviderContextValue {\n  status: APILoadingStatus;\n  loadedLibraries: LoadedLibraries;\n  importLibrary: typeof google.maps.importLibrary;\n  mapInstances: Record<string, google.maps.Map>;\n  addMapInstance: (map: google.maps.Map, id?: string) => void;\n  removeMapInstance: (id?: string) => void;\n  clearMapInstances: () => void;\n}\n\nexport const APIProviderContext =\n  React.createContext<APIProviderContextValue | null>(null);\n\nexport type APIProviderProps = {\n  /**\n   * apiKey must be provided to load the Google Maps JavaScript API. To create an API key, see: https://developers.google.com/maps/documentation/javascript/get-api-key\n   * Part of:\n   */\n  apiKey: string;\n  /**\n   * A custom id to reference the script tag can be provided. The default is set to 'google-maps-api'\n   * @default 'google-maps-api'\n   */\n  libraries?: Array<string>;\n  /**\n   * A specific version of the Google Maps JavaScript API can be used.\n   * Read more about versioning: https://developers.google.com/maps/documentation/javascript/versions\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  version?: string;\n  /**\n   * Sets the map to a specific region.\n   * Read more about localizing the Map: https://developers.google.com/maps/documentation/javascript/localization\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  region?: string;\n  /**\n   * Use a specific language for the map.\n   * Read more about localizing the Map: https://developers.google.com/maps/documentation/javascript/localization\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  language?: string;\n  /**\n   * auth_referrer_policy can be set to 'origin'.\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  authReferrerPolicy?: string;\n  /**\n   * A function that can be used to execute code after the Google Maps JavaScript API has been loaded.\n   */\n  onLoad?: () => void;\n};\n\n/**\n * local hook to set up the map-instance management context.\n */\nfunction useMapInstances() {\n  const [mapInstances, setMapInstances] = useState<\n    Record<string, google.maps.Map>\n  >({});\n\n  const addMapInstance = (mapInstance: google.maps.Map, id = 'default') => {\n    setMapInstances(instances => ({...instances, [id]: mapInstance}));\n  };\n\n  const removeMapInstance = (id = 'default') => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMapInstances(({[id]: _, ...remaining}) => remaining);\n  };\n\n  const clearMapInstances = () => {\n    setMapInstances({});\n  };\n\n  return {mapInstances, addMapInstance, removeMapInstance, clearMapInstances};\n}\n\n/**\n * local hook to handle the loading of the maps API, returns the current loading status\n * @param props\n */\nfunction useGoogleMapsApiLoader(props: APIProviderProps) {\n  const {onLoad, apiKey, version, libraries = [], ...otherApiParams} = props;\n\n  const [status, setStatus] = useState<APILoadingStatus>(\n    GoogleMapsApiLoader.loadingStatus\n  );\n  const [loadedLibraries, addLoadedLibrary] = useReducer(\n    (\n      loadedLibraries: LoadedLibraries,\n      action: {name: keyof LoadedLibraries; value: LoadedLibraries[string]}\n    ) => {\n      return {...loadedLibraries, [action.name]: action.value};\n    },\n    {}\n  );\n\n  const librariesString = useMemo(() => libraries?.join(','), [libraries]);\n  const serializedParams = useMemo(\n    () => JSON.stringify({apiKey, version, ...otherApiParams}),\n    [apiKey, version, otherApiParams]\n  );\n\n  const importLibrary: typeof google.maps.importLibrary = useCallback(\n    async (name: string) => {\n      if (loadedLibraries[name]) {\n        return loadedLibraries[name];\n      }\n\n      if (!google?.maps?.importLibrary) {\n        throw new Error(\n          '[api-provider-internal] importLibrary was called before ' +\n            'google.maps.importLibrary was defined.'\n        );\n      }\n\n      const res = await window.google.maps.importLibrary(name);\n      addLoadedLibrary({name, value: res});\n\n      return res;\n    },\n    [loadedLibraries]\n  );\n\n  useEffect(\n    () => {\n      (async () => {\n        try {\n          const params: ApiParams = {key: apiKey, ...otherApiParams};\n          if (version) params.v = version;\n          if (librariesString?.length > 0) params.libraries = librariesString;\n\n          await GoogleMapsApiLoader.load(params, status => setStatus(status));\n\n          for (const name of ['core', 'maps', ...libraries]) {\n            await importLibrary(name);\n          }\n\n          if (onLoad) {\n            onLoad();\n          }\n        } catch (error) {\n          console.error('<ApiProvider> failed to load Google Maps API', error);\n        }\n      })();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [apiKey, librariesString, serializedParams]\n  );\n\n  return {\n    status,\n    loadedLibraries,\n    importLibrary\n  };\n}\n\n/**\n * Component to wrap the Google Maps React components and load the Google Maps JavaScript API\n */\nexport const APIProvider = (\n  props: PropsWithChildren<APIProviderProps>\n): ReactElement | null => {\n  const {children, ...loaderProps} = props;\n  const {mapInstances, addMapInstance, removeMapInstance, clearMapInstances} =\n    useMapInstances();\n\n  const {status, loadedLibraries, importLibrary} =\n    useGoogleMapsApiLoader(loaderProps);\n\n  return (\n    <APIProviderContext.Provider\n      value={{\n        mapInstances,\n        addMapInstance,\n        removeMapInstance,\n        clearMapInstances,\n        status,\n        loadedLibraries,\n        importLibrary\n      }}>\n      {children}\n    </APIProviderContext.Provider>\n  );\n};\n", "import {useEffect} from 'react';\n\n/**\n * Handlers for all events that could be emitted by map-instances.\n */\nexport type MapEventProps = Partial<{\n  // map view state events\n  onBoundsChanged: (event: MapCameraChangedEvent) => void;\n  onCenterChanged: (event: MapCameraChangedEvent) => void;\n  onHeadingChanged: (event: MapCameraChangedEvent) => void;\n  onTiltChanged: (event: MapCameraChangedEvent) => void;\n  onZoomChanged: (event: MapCameraChangedEvent) => void;\n  onProjectionChanged: (event: MapCameraChangedEvent) => void;\n  onCameraChanged: (event: MapCameraChangedEvent) => void;\n\n  // mouse / touch / pointer events\n  onClick: (event: MapMouseEvent) => void;\n  onDblclick: (event: MapMouseEvent) => void;\n  onContextmenu: (event: MapMouseEvent) => void;\n  onMousemove: (event: MapMouseEvent) => void;\n  onMouseover: (event: MapMouseEvent) => void;\n  onMouseout: (event: MapMouseEvent) => void;\n  onDrag: (event: MapEvent) => void;\n  onDragend: (event: MapEvent) => void;\n  onDragstart: (event: MapEvent) => void;\n\n  // loading events\n  onTilesLoaded: (event: MapEvent) => void;\n  onIdle: (event: MapEvent) => void;\n\n  // configuration events\n  onIsFractionalZoomEnabledChanged: (event: MapEvent) => void;\n  onMapCapabilitiesChanged: (event: MapEvent) => void;\n  onMapTypeIdChanged: (event: MapEvent) => void;\n  onRenderingTypeChanged: (event: MapEvent) => void;\n}>;\n\n/**\n * Sets up effects to bind event-handlers for all event-props in MapEventProps.\n * @internal\n */\nexport function useMapEvents(\n  map: google.maps.Map | null,\n  props: MapEventProps\n) {\n  // note: calling a useEffect hook from within a loop is prohibited by the\n  // rules of hooks, but it's ok here since it's unconditional and the number\n  // and order of iterations is always strictly the same.\n  // (see https://legacy.reactjs.org/docs/hooks-rules.html)\n\n  for (const propName of eventPropNames) {\n    // fixme: this cast is essentially a 'trust me, bro' for typescript, but\n    //   a proper solution seems way too complicated right now\n    const handler = props[propName] as (ev: MapEvent) => void;\n    const eventType = propNameToEventType[propName];\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (!map) return;\n      if (!handler) return;\n\n      const listener = google.maps.event.addListener(\n        map,\n        eventType,\n        (ev?: google.maps.MapMouseEvent | google.maps.IconMouseEvent) => {\n          handler(createMapEvent(eventType, map, ev));\n        }\n      );\n\n      return () => listener.remove();\n    }, [map, eventType, handler]);\n  }\n}\n\n/**\n * Create the wrapped map-events used for the event-props.\n * @param type the event type as it is specified to the maps api\n * @param map the map instance the event originates from\n * @param srcEvent the source-event if there is one.\n */\nfunction createMapEvent(\n  type: string,\n  map: google.maps.Map,\n  srcEvent?: google.maps.MapMouseEvent | google.maps.IconMouseEvent\n): MapEvent {\n  const ev: MapEvent = {\n    type,\n    map,\n    detail: {},\n    stoppable: false,\n    stop: () => {}\n  };\n\n  if (cameraEventTypes.includes(type)) {\n    const camEvent = ev as MapCameraChangedEvent;\n\n    const center = map.getCenter();\n    const zoom = map.getZoom();\n    const heading = map.getHeading() || 0;\n    const tilt = map.getTilt() || 0;\n    const bounds = map.getBounds();\n\n    if (!center || !bounds || !Number.isFinite(zoom)) {\n      console.warn(\n        '[createEvent] at least one of the values from the map ' +\n          'returned undefined. This is not expected to happen. Please ' +\n          'report an issue at https://github.com/visgl/react-google-maps/issues/new'\n      );\n    }\n\n    camEvent.detail = {\n      center: center?.toJSON() || {lat: 0, lng: 0},\n      zoom: (zoom as number) || 0,\n      heading: heading as number,\n      tilt: tilt as number,\n      bounds: bounds?.toJSON() || {\n        north: 90,\n        east: 180,\n        south: -90,\n        west: -180\n      }\n    };\n\n    return camEvent;\n  } else if (mouseEventTypes.includes(type)) {\n    if (!srcEvent)\n      throw new Error('[createEvent] mouse events must provide a srcEvent');\n    const mouseEvent = ev as MapMouseEvent;\n\n    mouseEvent.domEvent = srcEvent.domEvent;\n    mouseEvent.stoppable = true;\n    mouseEvent.stop = () => srcEvent.stop();\n\n    mouseEvent.detail = {\n      latLng: srcEvent.latLng?.toJSON() || null,\n      placeId: (srcEvent as google.maps.IconMouseEvent).placeId\n    };\n\n    return mouseEvent;\n  }\n\n  return ev;\n}\n\n/**\n * maps the camelCased names of event-props to the corresponding event-types\n * used in the maps API.\n */\nconst propNameToEventType: {[prop in keyof Required<MapEventProps>]: string} = {\n  onBoundsChanged: 'bounds_changed',\n  onCenterChanged: 'center_changed',\n  onClick: 'click',\n  onContextmenu: 'contextmenu',\n  onDblclick: 'dblclick',\n  onDrag: 'drag',\n  onDragend: 'dragend',\n  onDragstart: 'dragstart',\n  onHeadingChanged: 'heading_changed',\n  onIdle: 'idle',\n  onIsFractionalZoomEnabledChanged: 'isfractionalzoomenabled_changed',\n  onMapCapabilitiesChanged: 'mapcapabilities_changed',\n  onMapTypeIdChanged: 'maptypeid_changed',\n  onMousemove: 'mousemove',\n  onMouseout: 'mouseout',\n  onMouseover: 'mouseover',\n  onProjectionChanged: 'projection_changed',\n  onRenderingTypeChanged: 'renderingtype_changed',\n  onTilesLoaded: 'tilesloaded',\n  onTiltChanged: 'tilt_changed',\n  onZoomChanged: 'zoom_changed',\n\n  // note: onCameraChanged is an alias for the bounds_changed event,\n  // since that is going to be fired in every situation where the camera is\n  // updated.\n  onCameraChanged: 'bounds_changed'\n} as const;\n\nconst cameraEventTypes = [\n  'bounds_changed',\n  'center_changed',\n  'heading_changed',\n  'projection_changed',\n  'tilt_changed',\n  'zoom_changed'\n];\n\nconst mouseEventTypes = [\n  'click',\n  'contextmenu',\n  'dblclick',\n  'mousemove',\n  'mouseout',\n  'mouseover'\n];\n\ntype MapEventPropName = keyof MapEventProps;\nconst eventPropNames = Object.keys(propNameToEventType) as MapEventPropName[];\n\nexport type MapEvent<T = unknown> = {\n  type: string;\n  map: google.maps.Map;\n  detail: T;\n\n  stoppable: boolean;\n  stop: () => void;\n  domEvent?: MouseEvent | TouchEvent | PointerEvent | KeyboardEvent | Event;\n};\n\nexport type MapMouseEvent = MapEvent<{\n  latLng: google.maps.LatLngLiteral | null;\n  placeId: string | null;\n}>;\n\nexport type MapCameraChangedEvent = MapEvent<{\n  center: google.maps.LatLngLiteral;\n  bounds: google.maps.LatLngBoundsLiteral;\n  zoom: number;\n  heading: number;\n  tilt: number;\n}>;\n", "import {DependencyList, EffectCallback, useEffect, useRef} from 'react';\nimport isDeepEqual from 'fast-deep-equal';\n\nexport function useDeepCompareEffect(\n  effect: EffectCallback,\n  deps: DependencyList\n) {\n  const ref = useRef<DependencyList | undefined>(undefined);\n\n  if (!ref.current || !isDeepEqual(deps, ref.current)) {\n    ref.current = deps;\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(effect, ref.current);\n}\n", "import {MapProps} from '../map';\nimport {useDeepCompareEffect} from '../../libraries/use-deep-compare-effect';\n\nconst mapOptionKeys = new Set([\n  'backgroundColor',\n  'clickableIcons',\n  'controlSize',\n  'disableDefaultUI',\n  'disableDoubleClickZoom',\n  'draggable',\n  'draggableCursor',\n  'draggingCursor',\n  'fullscreenControl',\n  'fullscreenControlOptions',\n  'gestureHandling',\n  'isFractionalZoomEnabled',\n  'keyboardShortcuts',\n  'mapTypeControl',\n  'mapTypeControlOptions',\n  'mapTypeId',\n  'maxZoom',\n  'minZoom',\n  'noClear',\n  'panControl',\n  'panControlOptions',\n  'restriction',\n  'rotateControl',\n  'rotateControlOptions',\n  'scaleControl',\n  'scaleControlOptions',\n  'scrollwheel',\n  'streetView',\n  'streetViewControl',\n  'streetViewControlOptions',\n  'styles',\n  'zoomControl',\n  'zoomControlOptions'\n]);\n\n/**\n * Internal hook to update the map-options when props are changed.\n *\n * @param map the map instance\n * @param mapProps the props to update the map-instance with\n * @internal\n */\nexport function useMapOptions(map: google.maps.Map | null, mapProps: MapProps) {\n  /* eslint-disable react-hooks/exhaustive-deps --\n   *\n   * The following effects aren't triggered when the map is changed.\n   * In that case, the values will be or have been passed to the map\n   * constructor via mapOptions.\n   */\n\n  const mapOptions: google.maps.MapOptions = {};\n  const keys = Object.keys(mapProps) as (keyof google.maps.MapOptions)[];\n  for (const key of keys) {\n    if (!mapOptionKeys.has(key)) continue;\n\n    mapOptions[key] = mapProps[key] as never;\n  }\n\n  // update the map options when mapOptions is changed\n  // Note: due to the destructuring above, mapOptions will be seen as changed\n  //   with every re-render, so we're assuming the maps-api will properly\n  //   deal with unchanged option-values passed into setOptions.\n  useDeepCompareEffect(() => {\n    if (!map) return;\n\n    map.setOptions(mapOptions);\n  }, [mapOptions]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n}\n", "import {useReducer} from 'react';\n\nexport function useForceUpdate(): () => void {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n\n  return forceUpdate;\n}\n", "import {MutableRefObject, useEffect, useRef} from 'react';\nimport {useForceUpdate} from '../../libraries/use-force-update';\n\nexport type CameraState = {\n  center: google.maps.LatLngLiteral;\n  heading: number;\n  tilt: number;\n  zoom: number;\n};\n\nexport type CameraStateRef = MutableRefObject<CameraState>;\n\nfunction handleBoundsChange(map: google.maps.Map, ref: CameraStateRef) {\n  const center = map.getCenter();\n  const zoom = map.getZoom();\n  const heading = map.getHeading() || 0;\n  const tilt = map.getTilt() || 0;\n  const bounds = map.getBounds();\n\n  if (!center || !bounds || !Number.isFinite(zoom)) {\n    console.warn(\n      '[useTrackedCameraState] at least one of the values from the map ' +\n        'returned undefined. This is not expected to happen. Please ' +\n        'report an issue at https://github.com/visgl/react-google-maps/issues/new'\n    );\n  }\n\n  // fixme: do we need the `undefined` cases for the camera-params? When are they used in the maps API?\n  Object.assign(ref.current, {\n    center: center?.toJSON() || {lat: 0, lng: 0},\n    zoom: (zoom as number) || 0,\n    heading: heading as number,\n    tilt: tilt as number\n  });\n}\n\n/**\n * Creates a mutable ref object to track the last known state of the map camera.\n * This is used in `useMapCameraParams` to reduce stuttering in normal operation\n * by avoiding updates of the map camera with values that have already been processed.\n */\nexport function useTrackedCameraStateRef(\n  map: google.maps.Map | null\n): CameraStateRef {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef<CameraState>({\n    center: {lat: 0, lng: 0},\n    heading: 0,\n    tilt: 0,\n    zoom: 0\n  });\n\n  // Record camera state with every bounds_changed event dispatched by the map.\n  // This data is used to prevent feeding these values back to the\n  // map-instance when a typical \"controlled component\" setup (state variable is\n  // fed into and updated by the map).\n  useEffect(() => {\n    if (!map) return;\n\n    const listener = google.maps.event.addListener(\n      map,\n      'bounds_changed',\n      () => {\n        handleBoundsChange(map, ref);\n\n        // When an event is occured, we have to update during the next cycle.\n        // The application could decide to ignore the event and not update any\n        // camera props of the map, meaning that in that case we will have to\n        // 'undo' the change to the camera.\n        forceUpdate();\n      }\n    );\n\n    return () => listener.remove();\n  }, [map, forceUpdate]);\n\n  return ref;\n}\n", "import {useContext} from 'react';\nimport {APIProviderContext} from '../components/api-provider';\nimport {APILoadingStatus} from '../libraries/api-loading-status';\n\nexport function useApiLoadingStatus(): APILoadingStatus {\n  return useContext(APIProviderContext)?.status || APILoadingStatus.NOT_LOADED;\n}\n", "import {useLayoutEffect} from 'react';\n\nexport type DeckGlCompatProps = {\n  /**\n   * Viewport from deck.gl\n   */\n  viewport?: unknown;\n  /**\n   * View state from deck.gl\n   */\n  viewState?: Record<string, unknown>;\n  /**\n   * Initial View State from deck.gl\n   */\n  initialViewState?: Record<string, unknown>;\n};\n\n/**\n * Internal hook that updates the camera when deck.gl viewState changes.\n * @internal\n */\nexport function useDeckGLCameraUpdate(\n  map: google.maps.Map | null,\n  props: DeckGlCompatProps\n) {\n  const {viewport, viewState} = props;\n  const isDeckGlControlled = !!viewport;\n\n  useLayoutEffect(() => {\n    if (!map || !viewState) return;\n\n    const {\n      latitude,\n      longitude,\n      bearing: heading,\n      pitch: tilt,\n      zoom\n    } = viewState as Record<string, number>;\n\n    map.moveCamera({\n      center: {lat: latitude, lng: longitude},\n      heading,\n      tilt,\n      zoom: zoom + 1\n    });\n  }, [map, viewState]);\n\n  return isDeckGlControlled;\n}\n", "export function isLatLngLiteral(\n  obj: unknown\n): obj is google.maps.LatLngLiteral {\n  if (!obj || typeof obj !== 'object') return false;\n  if (!('lat' in obj && 'lng' in obj)) return false;\n\n  return Number.isFinite(obj.lat) && Number.isFinite(obj.lng);\n}\n\nexport function latLngEquals(\n  a: google.maps.LatLngLiteral | google.maps.LatLng | undefined | null,\n  b: google.maps.LatLngLiteral | google.maps.LatLng | undefined | null\n): boolean {\n  if (!a || !b) return false;\n  const A = toLatLngLiteral(a);\n  const B = toLatLngLiteral(b);\n  if (A.lat !== B.lat || A.lng !== B.lng) return false;\n  return true;\n}\n\nexport function toLatLngLiteral(\n  obj: google.maps.LatLngLiteral | google.maps.LatLng\n): google.maps.LatLngLiteral {\n  if (isLatLngLiteral(obj)) return obj;\n\n  return obj.toJSON();\n}\n", "import {useLayoutEffect} from 'react';\nimport {CameraStateRef} from './use-tracked-camera-state-ref';\nimport {toLatLngLiteral} from '../../libraries/lat-lng-utils';\nimport {MapProps} from '../map';\n\nexport function useMapCameraParams(\n  map: google.maps.Map | null,\n  cameraStateRef: CameraStateRef,\n  mapProps: MapProps\n) {\n  const center = mapProps.center ? toLatLngLiteral(mapProps.center) : null;\n\n  let lat: number | null = null;\n  let lng: number | null = null;\n\n  if (center && Number.isFinite(center.lat) && Number.isFinite(center.lng)) {\n    lat = center.lat as number;\n    lng = center.lng as number;\n  }\n\n  const zoom: number | null = Number.isFinite(mapProps.zoom)\n    ? (mapProps.zoom as number)\n    : null;\n  const heading: number | null = Number.isFinite(mapProps.heading)\n    ? (mapProps.heading as number)\n    : null;\n  const tilt: number | null = Number.isFinite(mapProps.tilt)\n    ? (mapProps.tilt as number)\n    : null;\n\n  // the following effect runs for every render of the map component and checks\n  // if there are differences between the known state of the map instance\n  // (cameraStateRef, which is updated by all bounds_changed events) and the\n  // desired state in the props.\n\n  useLayoutEffect(() => {\n    if (!map) return;\n\n    const nextCamera: google.maps.CameraOptions = {};\n    let needsUpdate = false;\n\n    if (\n      lat !== null &&\n      lng !== null &&\n      (cameraStateRef.current.center.lat !== lat ||\n        cameraStateRef.current.center.lng !== lng)\n    ) {\n      nextCamera.center = {lat, lng};\n      needsUpdate = true;\n    }\n\n    if (zoom !== null && cameraStateRef.current.zoom !== zoom) {\n      nextCamera.zoom = zoom as number;\n      needsUpdate = true;\n    }\n\n    if (heading !== null && cameraStateRef.current.heading !== heading) {\n      nextCamera.heading = heading as number;\n      needsUpdate = true;\n    }\n\n    if (tilt !== null && cameraStateRef.current.tilt !== tilt) {\n      nextCamera.tilt = tilt as number;\n      needsUpdate = true;\n    }\n\n    if (needsUpdate) {\n      map.moveCamera(nextCamera);\n    }\n  });\n}\n", "import React, {CSSProperties} from 'react';\n\nexport const AuthFailureMessage = () => {\n  const style: CSSProperties = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    zIndex: 999,\n    display: 'flex',\n    flexFlow: 'column nowrap',\n    textAlign: 'center',\n    justifyContent: 'center',\n    fontSize: '.8rem',\n    color: 'rgba(0,0,0,0.6)',\n    background: '#dddddd',\n    padding: '1rem 1.5rem'\n  };\n\n  return (\n    <div style={style}>\n      <h2>Error: AuthFailure</h2>\n      <p>\n        A problem with your API key prevents the map from rendering correctly.\n        Please make sure the value of the <code>APIProvider.apiKey</code> prop\n        is correct. Check the error-message in the console for further details.\n      </p>\n    </div>\n  );\n};\n", "import {Ref, useCallback, useState} from 'react';\n\nexport function useCallbackRef<T>() {\n  const [el, setEl] = useState<T | null>(null);\n  const ref = useCallback((value: T) => setEl(value), [setEl]);\n\n  return [el, ref as Ref<T>] as const;\n}\n", "import {useApiLoadingStatus} from './use-api-loading-status';\nimport {APILoadingStatus} from '../libraries/api-loading-status';\n/**\n * Hook to check if the Google Maps API is loaded\n */\nexport function useApiIsLoaded(): boolean {\n  const status = useApiLoadingStatus();\n\n  return status === APILoadingStatus.LOADED;\n}\n", "import {Ref, useEffect, useState} from 'react';\n\nimport {MapProps} from '../map';\nimport {APIProviderContextValue} from '../api-provider';\n\nimport {useCallbackRef} from '../../libraries/use-callback-ref';\nimport {useApiIsLoaded} from '../../hooks/use-api-is-loaded';\n\n/**\n * The main hook takes care of creating map-instances and registering them in\n * the api-provider context.\n * @return a tuple of the map-instance created (or null) and the callback\n *   ref that will be used to pass the map-container into this hook.\n * @internal\n */\nexport function useMapInstance(\n  props: MapProps,\n  context: APIProviderContextValue\n): readonly [map: google.maps.Map | null, containerRef: Ref<HTMLDivElement>] {\n  const apiIsLoaded = useApiIsLoaded();\n  const [map, setMap] = useState<google.maps.Map | null>(null);\n  const [container, containerRef] = useCallbackRef<HTMLDivElement>();\n\n  const {\n    id,\n    defaultBounds,\n    defaultCenter,\n    defaultZoom,\n    defaultHeading,\n    defaultTilt,\n\n    ...mapOptions\n  } = props;\n\n  // apply default camera props if available and not overwritten by controlled props\n  if (!mapOptions.center && defaultCenter) mapOptions.center = defaultCenter;\n  if (!mapOptions.zoom && Number.isFinite(defaultZoom))\n    mapOptions.zoom = defaultZoom;\n  if (!mapOptions.heading && Number.isFinite(defaultHeading))\n    mapOptions.heading = defaultHeading;\n  if (!mapOptions.tilt && Number.isFinite(defaultTilt))\n    mapOptions.tilt = defaultTilt;\n\n  // create the map instance and register it in the context\n  useEffect(\n    () => {\n      if (!container || !apiIsLoaded) return;\n\n      const {addMapInstance, removeMapInstance} = context;\n      const newMap = new google.maps.Map(container, mapOptions);\n\n      setMap(newMap);\n      addMapInstance(newMap, id);\n\n      if (defaultBounds) {\n        newMap.fitBounds(defaultBounds);\n      }\n\n      // FIXME: When the mapId is changed,  we need to maintain the current camera params.\n\n      return () => {\n        if (!container || !apiIsLoaded) return;\n\n        // remove all event-listeners to minimize memory-leaks\n        google.maps.event.clearInstanceListeners(newMap);\n\n        setMap(null);\n        removeMapInstance(id);\n      };\n    },\n\n    // some dependencies are ignored in the list below:\n    //  - defaultBounds and the default* camera props will only be used once, and\n    //    changes should be ignored\n    //  - mapOptions has special hooks that take care of updating the options\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [container, apiIsLoaded, id, props.mapId]\n  );\n\n  return [map, containerRef] as const;\n}\n", "/* eslint-disable complexity */\nimport React, {\n  CSSProperties,\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useMemo\n} from 'react';\n\nimport {APIProviderContext} from '../api-provider';\n\nimport {MapEventProps, useMapEvents} from './use-map-events';\nimport {useMapOptions} from './use-map-options';\nimport {useTrackedCameraStateRef} from './use-tracked-camera-state-ref';\nimport {useApiLoadingStatus} from '../../hooks/use-api-loading-status';\nimport {APILoadingStatus} from '../../libraries/api-loading-status';\nimport {\n  DeckGlCompatProps,\n  useDeckGLCameraUpdate\n} from './use-deckgl-camera-update';\nimport {toLatLngLiteral} from '../../libraries/lat-lng-utils';\nimport {useMapCameraParams} from './use-map-camera-params';\nimport {AuthFailureMessage} from './auth-failure-message';\nimport {useMapInstance} from './use-map-instance';\n\nexport interface GoogleMapsContextValue {\n  map: google.maps.Map | null;\n}\nexport const GoogleMapsContext =\n  React.createContext<GoogleMapsContextValue | null>(null);\n\nexport type {\n  MapCameraChangedEvent,\n  MapEvent,\n  MapEventProps,\n  MapMouseEvent\n} from './use-map-events';\n\nexport type MapCameraProps = {\n  center: google.maps.LatLngLiteral;\n  zoom: number;\n  heading?: number;\n  tilt?: number;\n};\n\n/**\n * Props for the Google Maps Map Component\n */\nexport type MapProps = google.maps.MapOptions &\n  MapEventProps &\n  DeckGlCompatProps & {\n    /**\n     * An id for the map, this is required when multiple maps are present\n     * in the same APIProvider context.\n     */\n    id?: string;\n    /**\n     * Additional style rules to apply to the map dom-element.\n     */\n    style?: CSSProperties;\n    /**\n     * Additional css class-name to apply to the element containing the map.\n     */\n    className?: string;\n    /**\n     * Indicates that the map will be controlled externally. Disables all controls provided by the map itself.\n     */\n    controlled?: boolean;\n\n    defaultCenter?: google.maps.LatLngLiteral;\n    defaultZoom?: number;\n    defaultHeading?: number;\n    defaultTilt?: number;\n    /**\n     * Alternative way to specify the default camera props as a geographic region that should be fully visible\n     */\n    defaultBounds?: google.maps.LatLngBoundsLiteral;\n  };\n\nexport const Map = (props: PropsWithChildren<MapProps>) => {\n  const {children, id, className, style} = props;\n  const context = useContext(APIProviderContext);\n  const loadingStatus = useApiLoadingStatus();\n\n  if (!context) {\n    throw new Error(\n      '<Map> can only be used inside an <ApiProvider> component.'\n    );\n  }\n\n  const [map, mapRef] = useMapInstance(props, context);\n  const cameraStateRef = useTrackedCameraStateRef(map);\n\n  useMapCameraParams(map, cameraStateRef, props);\n  useMapEvents(map, props);\n  useMapOptions(map, props);\n\n  const isDeckGlControlled = useDeckGLCameraUpdate(map, props);\n  const isControlledExternally = !!props.controlled;\n\n  // disable interactions with the map for externally controlled maps\n  useEffect(() => {\n    if (!map) return;\n\n    // fixme: this doesn't seem to belong here (and it's mostly there for convenience anyway).\n    //   The reasoning is that a deck.gl canvas will be put on top of the map, rendering\n    //   any default map controls pretty much useless\n    if (isDeckGlControlled) {\n      map.setOptions({disableDefaultUI: true});\n    }\n\n    // disable all control-inputs when the map is controlled externally\n    if (isDeckGlControlled || isControlledExternally) {\n      map.setOptions({\n        gestureHandling: 'none',\n        keyboardShortcuts: false\n      });\n    }\n\n    return () => {\n      map.setOptions({\n        gestureHandling: props.gestureHandling,\n        keyboardShortcuts: props.keyboardShortcuts\n      });\n    };\n  }, [\n    map,\n    isDeckGlControlled,\n    isControlledExternally,\n    props.gestureHandling,\n    props.keyboardShortcuts\n  ]);\n\n  // setup a stable cameraOptions object that can be used as dependency\n  const center = props.center ? toLatLngLiteral(props.center) : null;\n  let lat: number | null = null;\n  let lng: number | null = null;\n  if (center && Number.isFinite(center.lat) && Number.isFinite(center.lng)) {\n    lat = center.lat as number;\n    lng = center.lng as number;\n  }\n\n  const cameraOptions: google.maps.CameraOptions = useMemo(() => {\n    return {\n      center: {lat: lat ?? 0, lng: lng ?? 0},\n      zoom: props.zoom ?? 0,\n      heading: props.heading ?? 0,\n      tilt: props.tilt ?? 0\n    };\n  }, [lat, lng, props.zoom, props.heading, props.tilt]);\n\n  // externally controlled mode: reject all camera changes that don't correspond to changes in props\n  useLayoutEffect(() => {\n    if (!map || !isControlledExternally) return;\n\n    map.moveCamera(cameraOptions);\n    const listener = map.addListener('bounds_changed', () => {\n      map.moveCamera(cameraOptions);\n    });\n\n    return () => listener.remove();\n  }, [map, isControlledExternally, cameraOptions]);\n\n  const combinedStyle: CSSProperties = useMemo(\n    () => ({\n      width: '100%',\n      height: '100%',\n      // when using deckgl, the map should be sent to the back\n      zIndex: isDeckGlControlled ? -1 : 0,\n\n      ...style\n    }),\n    [style, isDeckGlControlled]\n  );\n\n  if (loadingStatus === APILoadingStatus.AUTH_FAILURE) {\n    return (\n      <div\n        style={{position: 'relative', ...(className ? {} : combinedStyle)}}\n        className={className}>\n        <AuthFailureMessage />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={mapRef}\n      data-testid={'map'}\n      style={className ? undefined : combinedStyle}\n      className={className}\n      {...(id ? {id} : {})}>\n      {map ? (\n        <GoogleMapsContext.Provider value={{map}}>\n          {children}\n        </GoogleMapsContext.Provider>\n      ) : null}\n    </div>\n  );\n};\nMap.deckGLViewProps = true;\n", "import {useContext, useEffect} from 'react';\n\nimport {APIProviderContext} from '../components/api-provider';\nimport {useApiIsLoaded} from './use-api-is-loaded';\n\ninterface ApiLibraries {\n  core: google.maps.CoreLibrary;\n  maps: google.maps.MapsLibrary;\n  places: google.maps.PlacesLibrary;\n  geocoding: google.maps.GeocodingLibrary;\n  routes: google.maps.RoutesLibrary;\n  marker: google.maps.MarkerLibrary;\n  geometry: google.maps.GeometryLibrary;\n  elevation: google.maps.ElevationLibrary;\n  streetView: google.maps.StreetViewLibrary;\n  journeySharing: google.maps.JourneySharingLibrary;\n  drawing: google.maps.DrawingLibrary;\n  visualization: google.maps.VisualizationLibrary;\n}\n\nexport function useMapsLibrary<\n  K extends keyof ApiLibraries,\n  V extends ApiLibraries[K]\n>(name: K): V | null;\n\nexport function useMapsLibrary(name: string) {\n  const apiIsLoaded = useApiIsLoaded();\n  const ctx = useContext(APIProviderContext);\n\n  useEffect(() => {\n    if (!apiIsLoaded || !ctx) return;\n\n    // Trigger loading the libraries via our proxy-method.\n    // The returned promise is ignored, since importLibrary will update loadedLibraries\n    // list in the context, triggering a re-render.\n    void ctx.importLibrary(name);\n  }, [apiIsLoaded, ctx, name]);\n\n  return ctx?.loadedLibraries[name] || null;\n}\n", "/* eslint-disable complexity */\nimport React, {\n  Children,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useState\n} from 'react';\n\nimport {createPortal} from 'react-dom';\nimport {GoogleMapsContext} from './map';\n\nimport type {Ref, PropsWithChildren} from 'react';\nimport {useMapsLibrary} from '../hooks/use-maps-library';\n\nexport interface AdvancedMarkerContextValue {\n  marker: google.maps.marker.AdvancedMarkerElement;\n}\n\nexport const AdvancedMarkerContext =\n  React.createContext<AdvancedMarkerContextValue | null>(null);\n\ntype AdvancedMarkerEventProps = {\n  onClick?: (e: google.maps.MapMouseEvent) => void;\n  onDrag?: (e: google.maps.MapMouseEvent) => void;\n  onDragStart?: (e: google.maps.MapMouseEvent) => void;\n  onDragEnd?: (e: google.maps.MapMouseEvent) => void;\n};\n\nexport type AdvancedMarkerProps = PropsWithChildren<\n  Omit<google.maps.marker.AdvancedMarkerElementOptions, 'gmpDraggable'> &\n    AdvancedMarkerEventProps & {\n      /**\n       * className to add a class to the advanced marker element\n       * Can only be used with HTML Marker content\n       */\n      className?: string;\n      draggable?: boolean;\n    }\n>;\n\nexport type AdvancedMarkerRef = google.maps.marker.AdvancedMarkerElement | null;\nfunction useAdvancedMarker(props: AdvancedMarkerProps) {\n  const [marker, setMarker] =\n    useState<google.maps.marker.AdvancedMarkerElement | null>(null);\n  const [contentContainer, setContentContainer] =\n    useState<HTMLDivElement | null>(null);\n\n  const map = useContext(GoogleMapsContext)?.map;\n  const markerLibrary = useMapsLibrary('marker');\n\n  const {\n    children,\n    className,\n    onClick,\n    onDrag,\n    onDragStart,\n    onDragEnd,\n    collisionBehavior,\n    draggable,\n    position,\n    title,\n    zIndex\n  } = props;\n\n  const numChilds = Children.count(children);\n\n  // create marker instance and add it to the map when map becomes available\n  useEffect(() => {\n    if (!map || !markerLibrary) return;\n\n    const newMarker = new markerLibrary.AdvancedMarkerElement();\n    newMarker.map = map;\n\n    setMarker(newMarker);\n\n    // create container for marker content if there are children\n    if (numChilds > 0) {\n      const el = document.createElement('div');\n      if (className) el.className = className;\n\n      newMarker.content = el;\n\n      setContentContainer(el);\n    }\n\n    return () => {\n      newMarker.map = null;\n      setMarker(null);\n      setContentContainer(null);\n    };\n    // We do not want to re-render the whole marker when the className changes\n    // because that causes a short flickering of the marker.\n    // The className update is handled in the useEffect below.\n    // Excluding the className from the dependency array onm purpose here\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, markerLibrary, numChilds]);\n\n  // update className of advanced marker element\n  useEffect(() => {\n    if (!contentContainer) return;\n    contentContainer.className = className ?? '';\n  }, [contentContainer, className]);\n\n  // bind all marker events\n  useEffect(() => {\n    if (!marker) return;\n\n    const gme = google.maps.event;\n\n    if (onClick) gme.addListener(marker, 'click', onClick);\n    if (onDrag) gme.addListener(marker, 'drag', onDrag);\n    if (onDragStart) gme.addListener(marker, 'dragstart', onDragStart);\n    if (onDragEnd) gme.addListener(marker, 'dragend', onDragEnd);\n\n    if ((onDrag || onDragStart || onDragEnd) && !draggable) {\n      console.warn(\n        'You need to set the marker to draggable to listen to drag-events.'\n      );\n    }\n\n    const m = marker;\n    return () => {\n      gme.clearInstanceListeners(m);\n    };\n  }, [marker, draggable, onClick, onDragStart, onDrag, onDragEnd]);\n\n  // update other marker props when changed\n  useEffect(() => {\n    if (!marker) return;\n\n    if (position !== undefined) marker.position = position;\n    if (draggable !== undefined) marker.gmpDraggable = draggable;\n    if (collisionBehavior !== undefined)\n      marker.collisionBehavior = collisionBehavior;\n    if (zIndex !== undefined) marker.zIndex = zIndex;\n    if (typeof title === 'string') marker.title = title;\n  }, [marker, position, draggable, collisionBehavior, zIndex, title]);\n\n  return [marker, contentContainer] as const;\n}\n\nexport const AdvancedMarker = forwardRef(\n  (props: AdvancedMarkerProps, ref: Ref<AdvancedMarkerRef>) => {\n    const {children} = props;\n    const [marker, contentContainer] = useAdvancedMarker(props);\n\n    useImperativeHandle(ref, () => marker, [marker]);\n\n    if (!marker) {\n      return null;\n    }\n\n    return (\n      <AdvancedMarkerContext.Provider value={{marker}}>\n        {contentContainer !== null && createPortal(children, contentContainer)}\n      </AdvancedMarkerContext.Provider>\n    );\n  }\n);\n\nexport function useAdvancedMarkerRef() {\n  const [marker, setMarker] =\n    useState<google.maps.marker.AdvancedMarkerElement | null>(null);\n\n  const refCallback = useCallback((m: AdvancedMarkerRef | null) => {\n    setMarker(m);\n  }, []);\n\n  return [refCallback, marker] as const;\n}\n", "/* eslint-disable complexity */\nimport React, {\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useRef,\n  useState\n} from 'react';\nimport {createPortal} from 'react-dom';\n\nimport {GoogleMapsContext} from './map';\n\n/**\n * Props for the Info Window Component\n */\nexport type InfoWindowProps = google.maps.InfoWindowOptions & {\n  onCloseClick?: () => void;\n  anchor?: google.maps.Marker | google.maps.marker.AdvancedMarkerElement | null;\n};\n\n/**\n * Component to render a Google Maps Info Window\n */\nexport const InfoWindow = (props: PropsWithChildren<InfoWindowProps>) => {\n  const {children, anchor, onCloseClick, ...infoWindowOptions} = props;\n  const map = useContext(GoogleMapsContext)?.map;\n\n  const infoWindowRef = useRef<google.maps.InfoWindow | null>(null);\n  const [contentContainer, setContentContainer] =\n    useState<HTMLDivElement | null>(null);\n\n  // create infowindow once map is available\n  useEffect(() => {\n    if (!map) return;\n\n    const newInfowindow = new google.maps.InfoWindow(infoWindowOptions);\n\n    // Add content to info window\n    const el = document.createElement('div');\n    newInfowindow.setContent(el);\n\n    infoWindowRef.current = newInfowindow;\n    setContentContainer(el);\n\n    // Cleanup info window and event listeners on unmount\n    return () => {\n      google.maps.event.clearInstanceListeners(newInfowindow);\n\n      newInfowindow.close();\n      el.remove();\n\n      setContentContainer(null);\n    };\n    // We don't want to re-render a whole new infowindow\n    // when the options change to prevent flickering.\n    // Update of infoWindow options is handled in the useEffect below.\n    // Excluding infoWindowOptions from dependency array on purpose here.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, children]);\n\n  // Update infoWindowOptions\n  useEffect(() => {\n    infoWindowRef.current?.setOptions(infoWindowOptions);\n  }, [infoWindowOptions]);\n\n  // Handle the close click callback\n  useEffect(() => {\n    if (!infoWindowRef.current) return;\n\n    let listener: google.maps.MapsEventListener | null = null;\n\n    if (onCloseClick) {\n      listener = google.maps.event.addListener(\n        infoWindowRef.current,\n        'closeclick',\n        onCloseClick\n      );\n    }\n\n    return () => {\n      if (listener) listener.remove();\n    };\n  }, [onCloseClick]);\n\n  // Open info window after content container is set\n  useEffect(() => {\n    // anchor === null means an anchor is defined but not ready yet.\n    if (!contentContainer || !infoWindowRef.current || anchor === null) return;\n\n    const openOptions: google.maps.InfoWindowOpenOptions = {map};\n\n    if (anchor) {\n      openOptions.anchor = anchor;\n    }\n\n    infoWindowRef.current.open(openOptions);\n  }, [contentContainer, infoWindowRef, anchor, map]);\n\n  return (\n    <>{contentContainer !== null && createPortal(children, contentContainer)}</>\n  );\n};\n", "const shownMessages = new Set();\n\nexport function logErrorOnce(...args: Parameters<typeof console.error>) {\n  const key = JSON.stringify(args);\n\n  if (!shownMessages.has(key)) {\n    shownMessages.add(key);\n\n    console.error(...args);\n  }\n}\n", "import {useContext} from 'react';\n\nimport {APIProviderContext} from '../components/api-provider';\nimport {GoogleMapsContext} from '../components/map';\nimport {logErrorOnce} from '../libraries/errors';\n\n/**\n * Retrieves a map-instance from the context. This is either an instance\n * identified by id or the parent map instance if no id is specified.\n * Returns null if neither can be found.\n */\nexport const useMap = (id: string | null = null): google.maps.Map | null => {\n  const ctx = useContext(APIProviderContext);\n  const {map} = useContext(GoogleMapsContext) || {};\n\n  if (ctx === null) {\n    logErrorOnce(\n      'useMap(): failed to retrieve APIProviderContext. ' +\n        'Make sure that the <APIProvider> component exists and that the ' +\n        'component you are calling `useMap()` from is a sibling of the ' +\n        '<APIProvider>.'\n    );\n\n    return null;\n  }\n\n  const {mapInstances} = ctx;\n\n  // if an id is specified, the corresponding map or null is returned\n  if (id !== null) return mapInstances[id] || null;\n\n  // otherwise, return the closest ancestor\n  if (map) return map;\n\n  // finally, return the default map instance\n  return mapInstances['default'] || null;\n};\n", "import {useEffect, useMemo} from 'react';\nimport {createPortal} from 'react-dom';\nimport {useMap} from '../hooks/use-map';\n\nimport type {PropsWithChildren} from 'react';\n\ntype MapControlProps = PropsWithChildren<{\n  position: ControlPosition;\n}>;\n\n/**\n * Copy of the `google.maps.ControlPosition` constants.\n * They have to be duplicated here since we can't wait for the maps API to load to be able to use them.\n */\nexport const ControlPosition = {\n  TOP_LEFT: 1,\n  TOP_CENTER: 2,\n  TOP: 2,\n  TOP_RIGHT: 3,\n  LEFT_CENTER: 4,\n  LEFT_TOP: 5,\n  LEFT: 5,\n  LEFT_BOTTOM: 6,\n  RIGHT_TOP: 7,\n  RIGHT: 7,\n  RIGHT_CENTER: 8,\n  RIGHT_BOTTOM: 9,\n  BOTTOM_LEFT: 10,\n  BOTTOM_CENTER: 11,\n  BOTTOM: 11,\n  BOTTOM_RIGHT: 12,\n  CENTER: 13,\n  BLOCK_START_INLINE_START: 14,\n  BLOCK_START_INLINE_CENTER: 15,\n  BLOCK_START_INLINE_END: 16,\n  INLINE_START_BLOCK_CENTER: 17,\n  INLINE_START_BLOCK_START: 18,\n  INLINE_START_BLOCK_END: 19,\n  INLINE_END_BLOCK_START: 20,\n  INLINE_END_BLOCK_CENTER: 21,\n  INLINE_END_BLOCK_END: 22,\n  BLOCK_END_INLINE_START: 23,\n  BLOCK_END_INLINE_CENTER: 24,\n  BLOCK_END_INLINE_END: 25\n} as const;\nexport type ControlPosition =\n  (typeof ControlPosition)[keyof typeof ControlPosition];\n\nexport const MapControl = ({children, position}: MapControlProps) => {\n  const controlContainer = useMemo(() => document.createElement('div'), []);\n  const map = useMap();\n\n  useEffect(() => {\n    if (!map) return;\n\n    const controls = map.controls[position];\n\n    controls.push(controlContainer);\n\n    return () => {\n      const index = controls.getArray().indexOf(controlContainer);\n      controls.removeAt(index);\n    };\n  }, [controlContainer, map, position]);\n\n  return createPortal(children, controlContainer);\n};\n", "/* eslint-disable complexity */\nimport React, {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useState\n} from 'react';\n\nimport {GoogleMapsContext} from './map';\n\nimport type {Ref} from 'react';\n\ntype MarkerEventProps = {\n  onClick?: (e: google.maps.MapMouseEvent) => void;\n  onDrag?: (e: google.maps.MapMouseEvent) => void;\n  onDragStart?: (e: google.maps.MapMouseEvent) => void;\n  onDragEnd?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOver?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOut?: (e: google.maps.MapMouseEvent) => void;\n};\n\nexport type MarkerProps = google.maps.MarkerOptions & MarkerEventProps;\n\nexport type MarkerRef = Ref<google.maps.Marker | null>;\n\nfunction useMarker(props: MarkerProps) {\n  const [marker, setMarker] = useState<google.maps.Marker | null>(null);\n  const map = useContext(GoogleMapsContext)?.map;\n\n  const {\n    onClick,\n    onDrag,\n    onDragStart,\n    onDragEnd,\n    onMouseOver,\n    onMouseOut,\n    ...markerOptions\n  } = props;\n\n  const {position, draggable} = markerOptions;\n\n  // create marker instance and add to the map once the map is available\n  useEffect(() => {\n    if (!map) {\n      if (map === undefined)\n        console.error('<Marker> has to be inside a Map component.');\n\n      return;\n    }\n\n    const newMarker = new google.maps.Marker(markerOptions);\n    newMarker.setMap(map);\n    setMarker(newMarker);\n\n    return () => {\n      newMarker.setMap(null);\n      setMarker(null);\n    };\n    // We do not want to re-render the whole marker when the options change.\n    // Marker options update is handled in a useEffect below.\n    // Excluding markerOptions from dependency array on purpose here.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]);\n\n  // attach and re-attach event-handlers when any of the properties change\n  useEffect(() => {\n    if (!marker) return;\n\n    const m = marker;\n\n    // Add event listeners\n    const gme = google.maps.event;\n\n    if (onClick) gme.addListener(m, 'click', onClick);\n    if (onDrag) gme.addListener(m, 'drag', onDrag);\n    if (onDragStart) gme.addListener(m, 'dragstart', onDragStart);\n    if (onDragEnd) gme.addListener(m, 'dragend', onDragEnd);\n    if (onMouseOver) gme.addListener(m, 'mouseover', onMouseOver);\n    if (onMouseOut) gme.addListener(m, 'mouseout', onMouseOut);\n\n    marker.setDraggable(Boolean(draggable));\n\n    return () => {\n      gme.clearInstanceListeners(m);\n    };\n  }, [\n    marker,\n    draggable,\n    onClick,\n    onDrag,\n    onDragStart,\n    onDragEnd,\n    onMouseOver,\n    onMouseOut\n  ]);\n\n  // update markerOptions (note the dependencies aren't properly checked\n  // here, we just assume that setOptions is smart enough to not waste a\n  // lot of time updating values that didn't change)\n  useEffect(() => {\n    if (!marker) return;\n    if (markerOptions) marker.setOptions(markerOptions);\n  }, [marker, markerOptions]);\n\n  // update position when changed\n  useEffect(() => {\n    // Should not update position when draggable\n    if (draggable || !position || !marker) return;\n\n    marker.setPosition(position);\n  }, [draggable, position, marker]);\n\n  return marker;\n}\n\n/**\n * Component to render a Google Maps Marker on a map\n */\nexport const Marker = forwardRef((props: MarkerProps, ref: MarkerRef) => {\n  const marker = useMarker(props);\n\n  useImperativeHandle(ref, () => marker, [marker]);\n\n  return <></>;\n});\n\nexport function useMarkerRef() {\n  const [marker, setMarker] = useState<google.maps.Marker | null>(null);\n\n  const refCallback = useCallback((m: google.maps.Marker | null) => {\n    setMarker(m);\n  }, []);\n\n  return [refCallback, marker] as const;\n}\n", "import {\n  Children,\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useMemo\n} from 'react';\nimport {AdvancedMarkerContext} from './advanced-marker';\nimport {createPortal} from 'react-dom';\nimport {logErrorOnce} from '../libraries/errors';\n\n/**\n * Props for the Pin component\n */\nexport type PinProps = google.maps.marker.PinElementOptions;\n\n/**\n * Component to render a google maps marker Pin View\n */\nexport const Pin = (props: PropsWithChildren<PinProps>) => {\n  const advancedMarker = useContext(AdvancedMarkerContext)?.marker;\n  const glyphContainer = useMemo(() => document.createElement('div'), []);\n\n  // Create Pin View instance\n  useEffect(() => {\n    if (!advancedMarker) {\n      if (advancedMarker === undefined) {\n        console.error(\n          'The <Pin> component can only be used inside <AdvancedMarker>.'\n        );\n      }\n\n      return;\n    }\n\n    if (props.glyph && props.children) {\n      logErrorOnce(\n        'The <Pin> component only uses children to render the glyph if both the glyph property and children are present.'\n      );\n    }\n\n    if (Children.count(props.children) > 1) {\n      logErrorOnce(\n        'Passing multiple children to the <Pin> component might lead to unexpected results.'\n      );\n    }\n\n    const pinViewOptions: google.maps.marker.PinElementOptions = {\n      ...props\n    };\n\n    const pinElement = new google.maps.marker.PinElement(pinViewOptions);\n\n    // Set glyph to glyph container if children are present (rendered via portal).\n    // If both props.glyph and props.children are present, props.children takes priority.\n    if (props.children) {\n      pinElement.glyph = glyphContainer;\n    }\n\n    // Set content of Advanced Marker View to the Pin View element\n    advancedMarker.content = pinElement.element;\n  }, [advancedMarker, glyphContainer, props]);\n\n  return createPortal(props.children, glyphContainer);\n};\n", "/**\n * A typescript assertion function used in cases where typescript has to be\n * convinced that the object in question can not be null.\n *\n * @param value\n * @param message\n */\nexport function assertNotNull<TValue>(\n  value: TValue,\n  message = 'assertion failed'\n): asserts value is NonNullable<TValue> {\n  if (value === null || value === undefined) {\n    throw Error(message);\n  }\n}\n", "import {useMemo, useEffect, useCallback} from 'react';\n\nimport {useApiIsLoaded} from './use-api-is-loaded';\nimport {useMap} from './use-map';\nimport {assertNotNull} from '../libraries/assert-not-null';\n\nexport interface DirectionsServiceHookOptions {\n  mapId?: string;\n  renderOnMap?: boolean;\n  renderOptions?: google.maps.DirectionsRendererOptions;\n}\n\ninterface DirectionsServiceHookReturns {\n  directionsService: google.maps.DirectionsService | null;\n  directionsRenderer: google.maps.DirectionsRenderer | null;\n  renderRoute:\n    | ((\n        request: google.maps.DirectionsRequest\n      ) => Promise<google.maps.DirectionsResult>)\n    | null;\n  setRenderedRouteIndex: ((index: number) => void) | null;\n}\n\nconst useDirectionsRenderer = (\n  mapId: string | null,\n  renderOnMap?: boolean,\n  renderOptions?: google.maps.DirectionsRendererOptions\n) => {\n  const map = useMap(mapId);\n\n  // create the renderer instance\n  const directionsRenderer = useMemo(\n    () => {\n      if (!map || !renderOnMap) return null;\n\n      const renderer = new google.maps.DirectionsRenderer(renderOptions);\n      renderer.setMap(map);\n\n      return renderer;\n    },\n    // note: no dependency on renderOptions since those are handled in the\n    // next effect.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [map, renderOnMap]\n  );\n\n  useEffect(\n    () => {\n      if (!directionsRenderer) return;\n\n      directionsRenderer.setOptions(renderOptions || {});\n    },\n    // note: directionsRenderer dependency isn't needed since the\n    // renderOptions will be set on initialization when creating the renderer.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [renderOptions]\n  );\n\n  return directionsRenderer;\n};\n\n/**\n * Hook to get Google Maps Places Directions Service instance\n */\nexport const useDirectionsService = (\n  props: DirectionsServiceHookOptions = {}\n): DirectionsServiceHookReturns => {\n  const {mapId = null, renderOnMap, renderOptions} = props;\n  const isApiLoaded = useApiIsLoaded();\n\n  // Creates a Directions Service instance\n  const directionsService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!isApiLoaded) return null;\n\n    return new google.maps.DirectionsService();\n  }, [isApiLoaded]);\n\n  // create the renderer instance\n  const directionsRenderer = useDirectionsRenderer(\n    mapId,\n    renderOnMap,\n    renderOptions\n  );\n\n  // Custom Directions route request followed by directions rendering\n  const renderRoute = useCallback(\n    async (\n      request: google.maps.DirectionsRequest\n    ): Promise<google.maps.DirectionsResult> => {\n      // findAndRenderRoute() isn't callable when either directions\n      // service or renderer aren't ready\n      assertNotNull(directionsService);\n      assertNotNull(directionsRenderer);\n\n      const result = await directionsService.route(request);\n      directionsRenderer.setDirections(result);\n\n      return result;\n    },\n    [directionsService, directionsRenderer]\n  );\n\n  // Renders directions route of given index\n  const setRenderedRouteIndex = (index: number) => {\n    assertNotNull(directionsRenderer);\n\n    directionsRenderer.setRouteIndex(index);\n  };\n\n  return {\n    directionsService,\n    directionsRenderer,\n    renderRoute: directionsService && directionsRenderer ? renderRoute : null,\n    setRenderedRouteIndex:\n      directionsService && directionsRenderer ? setRenderedRouteIndex : null\n  };\n};\n", "/* eslint-disable complexity */\nimport {useEffect, useState} from 'react';\nimport {useApiIsLoaded} from './use-api-is-loaded';\nimport {useMap} from './use-map';\n\nexport interface StreetViewPanoramaProps {\n  mapId?: string;\n  divElement?: HTMLElement | null;\n  position?: google.maps.LatLng | google.maps.LatLngLiteral;\n  pov?: google.maps.StreetViewPov;\n  zoom?: number;\n}\n\n/**\n * Hook to get Street View Panorama\n */\nexport const useStreetViewPanorama = (\n  props: StreetViewPanoramaProps = {}\n): google.maps.StreetViewPanorama | null => {\n  const {mapId, divElement, position, pov, zoom} = props;\n  const googleMapsAPIIsLoaded = useApiIsLoaded();\n  const map = useMap(mapId);\n\n  const [streetViewPanorama, setStreetViewPanorama] =\n    useState<google.maps.StreetViewPanorama | null>(null);\n\n  // Creates a Street View instance\n  useEffect(\n    () => {\n      if (!googleMapsAPIIsLoaded) return;\n\n      let pano: google.maps.StreetViewPanorama | null = null;\n      if (divElement) {\n        pano = new google.maps.StreetViewPanorama(divElement);\n      } else if (map) {\n        pano = map.getStreetView();\n      }\n\n      setStreetViewPanorama(pano);\n\n      if (!pano) return;\n      if (pov) pano.setPov(pov);\n      if (position) pano.setPosition(position);\n      if (zoom || zoom === 0) pano.setZoom(zoom);\n\n      return (): void => {\n        setStreetViewPanorama(null);\n\n        if (map) map.setStreetView(null);\n      };\n    },\n    // fixme: implement extra hook to update FOV when props change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [googleMapsAPIIsLoaded, map, divElement]\n  );\n\n  return streetViewPanorama;\n};\n", "const mapLinear = (x: number, a1: number, a2: number, b1: number, b2: number) =>\n  b1 + ((x - a1) * (b2 - b1)) / (a2 - a1);\n\nconst getMapMaxTilt = (zoom: number) => {\n  if (zoom <= 10) {\n    return 30;\n  }\n  if (zoom >= 15.5) {\n    return 67.5;\n  }\n\n  // range [10...14]\n  if (zoom <= 14) {\n    return mapLinear(zoom, 10, 14, 30, 45);\n  }\n\n  // range [14...15.5]\n  return mapLinear(zoom, 14, 15.5, 45, 67.5);\n};\n\n/**\n * Function to limit the tilt range of the google maps map when updating the view state\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const limitTiltRange = ({viewState}: any) => {\n  const pitch = viewState.pitch;\n  const gmZoom = viewState.zoom + 1;\n  const maxTilt = getMapMaxTilt(gmZoom);\n\n  return {...viewState, fovy: 25, pitch: Math.min(maxTilt, pitch)};\n};\n"],
  "mappings": "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",
  "names": ["APILoadingStatus", "NOT_LOADED", "LOADING", "LOADED", "FAILED", "AUTH_FAILURE", "MAPS_API_BASE_URL", "GoogleMapsApiLoader", "load", "params", "onLoadingStatusChange", "_window$google", "libraries", "split", "serializedParams", "serializeParams", "window", "google", "maps", "importLibrary", "serializedApiParams", "initImportLibrary", "loadingStatus", "console", "warn", "lib", "v", "key", "language", "region", "authReferrerPolicy", "solutionChannel", "join", "apiPromise", "loadApi", "library", "Promise", "resolve", "reject", "_document$querySelect", "scriptElement", "document", "createElement", "urlParams", "URLSearchParams", "value", "Object", "entries", "urlParamName", "replace", "t", "toLowerCase", "set", "async", "src", "toString", "__googleMapsCallback__", "gm_authFailure", "onerror", "Error", "nonce", "querySelector", "head", "append", "libraryName", "then", "APIProviderContext", "React", "createContext", "useMapInstances", "mapInstances", "setMapInstances", "useState", "addMapInstance", "mapInstance", "id", "instances", "_extends", "removeMapInstance", "_ref", "remaining", "_objectWithoutPropertiesLoose", "map", "_toPropertyKey", "clearMapInstances", "useGoogleMapsApiLoader", "props", "onLoad", "apiKey", "version", "otherApiParams", "_excluded", "status", "setStatus", "loadedLibraries", "addLoadedLibrary", "useReducer", "action", "name", "librariesString", "useMemo", "JSON", "stringify", "useCallback", "_google", "res", "useEffect", "length", "error", "APIProvider", "children", "loaderProps", "_excluded2", "Provider", "useMapEvents", "propName", "eventPropNames", "handler", "eventType", "propNameToEventType", "listener", "event", "addListener", "ev", "createMapEvent", "remove", "type", "srcEvent", "detail", "stoppable", "stop", "cameraEventTypes", "includes", "camEvent", "center", "getCenter", "zoom", "getZoom", "heading", "getHeading", "tilt", "getTilt", "bounds", "getBounds", "Number", "isFinite", "toJSON", "lat", "lng", "north", "east", "south", "west", "mouseEventTypes", "_srcEvent$latLng", "mouseEvent", "domEvent", "latLng", "placeId", "onBoundsChanged", "onCenterChanged", "onClick", "onContextmenu", "onDblclick", "onDrag", "onDragend", "onDragstart", "onHeadingChanged", "onIdle", "onIsFractionalZoomEnabledChanged", "onMapCapabilitiesChanged", "onMapTypeIdChanged", "onMousemove", "onMouseout", "onMouseover", "onProjectionChanged", "onRenderingTypeChanged", "onTilesLoaded", "onTiltChanged", "onZoomChanged", "onCameraChanged", "keys", "useDeepCompareEffect", "effect", "deps", "ref", "useRef", "undefined", "current", "isDeepEqual", "mapOptionKeys", "Set", "useMapOptions", "mapProps", "mapOptions", "has", "setOptions", "useForceUpdate", "forceUpdate", "x", "handleBoundsChange", "assign", "useTrackedCameraStateRef", "useApiLoadingStatus", "_useContext", "useContext", "useDeckGLCameraUpdate", "viewport", "viewState", "isDeckGlControlled", "useLayoutEffect", "latitude", "longitude", "bearing", "pitch", "moveCamera", "isLatLngLiteral", "obj", "latLngEquals", "a", "b", "A", "toLatLngLiteral", "B", "useMapCameraParams", "cameraStateRef", "nextCamera", "needsUpdate", "AuthFailureMessage", "style", "position", "top", "left", "bottom", "right", "zIndex", "display", "flexFlow", "textAlign", "justifyContent", "fontSize", "color", "background", "padding", "useCallbackRef", "el", "setEl", "useApiIsLoaded", "useMapInstance", "context", "apiIsLoaded", "setMap", "container", "containerRef", "defaultBounds", "defaultCenter", "defaultZoom", "defaultHeading", "defaultTilt", "newMap", "Map", "fitBounds", "clearInstanceListeners", "mapId", "GoogleMapsContext", "className", "mapRef", "isControlledExternally", "controlled", "disableDefaultUI", "gestureHandling", "keyboardShortcuts", "cameraOptions", "_lat", "_lng", "_props$zoom", "_props$heading", "_props$tilt", "combinedStyle", "width", "height", "deckGLViewProps", "useMapsLibrary", "ctx", "AdvancedMarkerContext", "useAdvancedMarker", "marker", "setMarker", "contentContainer", "setContentContainer", "markerLibrary", "onDragStart", "onDragEnd", "collisionBehavior", "draggable", "title", "numChilds", "Children", "count", "newMarker", "AdvancedMarkerElement", "content", "gme", "m", "gmpDraggable", "AdvancedMarker", "forwardRef", "useImperativeHandle", "createPortal", "useAdvancedMarkerRef", "refCallback", "InfoWindow", "anchor", "onCloseClick", "infoWindowOptions", "infoWindowRef", "newInfowindow", "setContent", "close", "_infoWindowRef$curren", "openOptions", "open", "Fragment", "shownMessages", "logErrorOnce", "args", "add", "useMap", "ControlPosition", "TOP_LEFT", "TOP_CENTER", "TOP", "TOP_RIGHT", "LEFT_CENTER", "LEFT_TOP", "LEFT", "LEFT_BOTTOM", "RIGHT_TOP", "RIGHT", "RIGHT_CENTER", "RIGHT_BOTTOM", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM", "BOTTOM_RIGHT", "CENTER", "BLOCK_START_INLINE_START", "BLOCK_START_INLINE_CENTER", "BLOCK_START_INLINE_END", "INLINE_START_BLOCK_CENTER", "INLINE_START_BLOCK_START", "INLINE_START_BLOCK_END", "INLINE_END_BLOCK_START", "INLINE_END_BLOCK_CENTER", "INLINE_END_BLOCK_END", "BLOCK_END_INLINE_START", "BLOCK_END_INLINE_CENTER", "BLOCK_END_INLINE_END", "MapControl", "controlContainer", "controls", "push", "index", "getArray", "indexOf", "removeAt", "useMarker", "onMouseOver", "onMouseOut", "markerOptions", "Marker", "setDraggable", "Boolean", "setPosition", "useMarkerRef", "Pin", "advancedMarker", "glyphContainer", "glyph", "pinViewOptions", "pinElement", "PinElement", "element", "assertNotNull", "message", "useDirectionsRenderer", "renderOnMap", "renderOptions", "directionsRenderer", "renderer", "DirectionsRenderer", "useDirectionsService", "isApiLoaded", "directionsService", "DirectionsService", "renderRoute", "request", "result", "route", "setDirections", "setRenderedRouteIndex", "setRouteIndex", "useStreetViewPanorama", "divElement", "pov", "googleMapsAPIIsLoaded", "streetViewPanorama", "setStreetViewPanorama", "pano", "StreetViewPanorama", "getStreetView", "setPov", "setZoom", "setStreetView", "mapLinear", "a1", "a2", "b1", "b2", "getMapMaxTilt", "limitTiltRange", "gmZoom", "maxTilt", "fovy", "Math", "min"]
}
